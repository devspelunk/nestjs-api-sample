services:
  nest-dev-api:
    container_name: nestjs_dev
    image: mlemus117/nestjs-api-dev:latest
    build:
      context: .
      target: development
      dockerfile: ./nestjs.Dockerfile
      args: 
        - NODE_ENV=development
    command: npm run start:debug
    ports:
      - "3000:3000"
      - "9229:9229"
    networks:
      - api-network
    volumes:
      - ./nestjs-api:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - MONGO_USERNAME=${MONGO_USERNAME:?err}
      - MONGO_PASSWORD=${MONGO_PASSWORD:?err}
      - MONGO_DATABASE_NAME=${MONGO_DATABASE_NAME:?err}
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  mongo:
    container_name: nestjs_mongo
    image: mongo:6.0.2
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=example-database
    networks:
      - api-network
    volumes:
      # Seed sample data
      - ./database/seed.js:/docker-entrypoint-initdb.d/seed.js
    restart: unless-stopped
    # Health check here so that compose will wait for a healthy mongo before it starts nestjs
    healthcheck:
      test: "[ `echo 'db.runCommand(\"ping\").ok' | mongo localhost/example-database --quiet` ] && echo 0 || echo 1"
      interval: 5s
      start_period: 10s
      timeout: 4s
      retries: 3
  
  redis:
    container_name: nestjs_redis
    image: redis:6.2.7
    restart: unless-stopped
    # Health check here so that compose will wait for a healthy redis before it starts nestjs
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    expose:
        - "6379"
    networks:
        - api-network

networks:
  api-network: